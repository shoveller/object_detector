{"version":3,"sources":["objectDetector.ts","CanvasCamera.tsx","rectDrawer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["detect","detector","video","a","getObjectDetector","onReady","load","get2Dctx","ref","canvas","current","ctx","getContext","flameRate","drawFrame","width","height","modelRunner","onDraw","paused","ended","drawImage","setTimeout","getCameraStream","navigator","mediaDevices","getUserMedia","setup","srcObject","addEventListener","play","CanvasCameraContext","createContext","undefined","setCtx","setVideo","CanvasCameraContextProvider","props","useState","Provider","value","children","CanvasCamera","createRef","document","createElement","useEffect","draw","objects","length","fillStyle","fillRect","i","font","bbox","x","y","fillText","class","score","toFixed","beginPath","rect","strokeStyle","stroke","closePath","App","results","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b659ce18.chunk.js","sourcesContent":["import '@tensorflow/tfjs-backend-cpu'\nimport '@tensorflow/tfjs-backend-webgl'\nimport { ObjectDetection, load } from '@tensorflow-models/coco-ssd'\n\nexport const detect = async (detector: ObjectDetection, video: HTMLVideoElement) => {\n  try {\n    return detector.detect(video)\n  } catch (e) {\n    throw e\n  }\n}\n\nexport const getObjectDetector = async (onReady?: Function) => await load()\n","import React, {\n\tcreateContext,\n\tcreateRef,\n\tDispatch,\n\tReactElement,\n\tRefObject,\n\tSetStateAction,\n\tuseEffect,\n\tuseState,\n} from 'react'\n\ninterface ICanvasCameraProps {\n\twidth: number\n\theight: number\n\tonReady?: () => Promise<any>\n\tonDraw?: (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n\t\tmodelRunner?: any,\n\t) => Promise<any>\n\tchildren?: ReactElement\n}\n\nexport interface ICanvasCameraContext {\n\tctx?: CanvasRenderingContext2D\n\tsetCtx?: Dispatch<SetStateAction<CanvasRenderingContext2D | undefined>>\n\tvideo?: HTMLVideoElement\n\tsetVideo?: Dispatch<SetStateAction<HTMLVideoElement | undefined>>\n}\n\ninterface ICanvasCameraContextProvider {\n\tctx?: CanvasRenderingContext2D\n\tvideo?: HTMLVideoElement\n\tchildren?: ReactElement\n}\n\nconst get2Dctx = (ref: RefObject<HTMLCanvasElement>) => {\n\tconst canvas = ref.current\n\tif (!canvas) {\n\t\treturn\n\t}\n\tconst ctx = canvas.getContext('2d')\n\tif (ctx) {\n\t\treturn ctx\n\t}\n\treturn\n}\n\nconst flameRate = 1000 / 30\n\nconst drawFrame = (\n\tvideo: HTMLVideoElement,\n\tctx: CanvasRenderingContext2D,\n\twidth: number,\n\theight: number,\n  modelRunner?: any,\n  onDraw?: (\n    video: HTMLVideoElement,\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    modelRunner?: any,\n  ) => Promise<any>,\n) => {\n\tif (video.paused) return\n\tif (video.ended) return\n\n\tctx.drawImage(video, 0, 0, width, height)\n\tif (onDraw) {\n\t\tonDraw(video, ctx, width, height, modelRunner)\n\t}\n\tsetTimeout(() => drawFrame(video, ctx, width, height, modelRunner, onDraw), flameRate)\n}\n\nconst createVideo = () => document.createElement('video')\n\nconst getCameraStream = async () =>\n\tawait navigator.mediaDevices.getUserMedia({ video: true })\n\nconst setup = async (\n\tctx: CanvasRenderingContext2D,\n\tvideo: HTMLVideoElement,\n\twidth: number,\n\theight: number,\n\tonReady?: () => Promise<any>,\n\tonDraw?: (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n\t\tmodelRunner?: any,\n\t) => Promise<any>,\n) => {\n  let modelRunner: any\n  if (onReady) {\n    modelRunner = await onReady()\n  }\n\tvideo.srcObject = await getCameraStream()\n\tvideo.addEventListener('loadeddata', function () {\n\t\tvideo.play()\n\t\tsetTimeout(() => drawFrame(video, ctx, width, height, modelRunner, onDraw), flameRate)\n\t})\n}\n\nexport const CanvasCameraContext = createContext<ICanvasCameraContext>({\n\tctx: undefined,\n\tsetCtx: undefined,\n\tvideo: undefined,\n\tsetVideo: undefined,\n})\n\nconst CanvasCameraContextProvider = (props: ICanvasCameraContextProvider) => {\n\tconst [ctx, setCtx] = useState<CanvasRenderingContext2D | undefined>(\n\t\tprops.ctx,\n\t)\n\tconst [video, setVideo] = useState<HTMLVideoElement | undefined>(props.video)\n\n\treturn (\n\t\t<CanvasCameraContext.Provider value={{ ctx, setCtx, video, setVideo }}>\n\t\t\t{props.children}\n\t\t</CanvasCameraContext.Provider>\n\t)\n}\n\nexport const CanvasCamera = (props: ICanvasCameraProps) => {\n\tconst ref = createRef<HTMLCanvasElement>()\n\tconst video = createVideo()\n\tconst { width, height, children, onReady, onDraw } = props\n\tuseEffect(() => {\n\t\tconst ctx = get2Dctx(ref)\n\t\tif (!ctx) {\n\t\t\treturn\n\t\t}\n\n\t\tsetup(ctx, video, width, height, onReady, onDraw)\n\t}, [ref, video, width, height, onDraw, onReady])\n\tconst ctx = get2Dctx(ref)\n\n\treturn (\n\t\t<canvas ref={ref} width={width} height={height}>\n\t\t\t<CanvasCameraContextProvider ctx={ctx} video={video}>\n\t\t\t\t{children}\n\t\t\t</CanvasCameraContextProvider>\n\t\t</canvas>\n\t)\n}\n","import { DetectedObject } from \"@tensorflow-models/coco-ssd\";\n\nexport const draw = (width: number, height: number, ctx: CanvasRenderingContext2D, video: HTMLVideoElement, objects?: DetectedObject[]) => {\n\tif (!objects?.length) return\n\n\t// Clear part of the canvas\n\tctx.fillStyle = \"#000000\"\n\tctx.fillRect(0,0, width, height);\n\n\tctx.drawImage(video, 0, 0, width, height);\n\n\tfor (let i = 0; i < objects.length; i += 1) {\n\t\tctx.font = \"16px Arial\";\n\t\tctx.fillStyle = \"green\";\n\t\tconst [x, y, width, height] = objects[i].bbox\n\t\tctx.fillText(`${objects[i].class} ${(objects[i].score * 100).toFixed(0)}%`, x + 4, y + 16);\n\n\t\tctx.beginPath();\n\t\tctx.rect(x, y, width, height);\n\t\tctx.strokeStyle = \"green\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n}\n","import React from 'react'\nimport { getObjectDetector, detect } from './objectDetector'\nimport { CanvasCamera } from './CanvasCamera'\nimport { draw } from './rectDrawer'\n\nfunction App() {\n\tconst onReady = async () => {\n\t\treturn await getObjectDetector()\n\t}\n\n\tconst onDraw = async (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n\t\tdetector?: any,\n\t) => {\n\t\tconst results = await detect(detector, video)\n\t\tdraw(width, height, ctx, video, results)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<CanvasCamera\n\t\t\t\t\twidth={640}\n\t\t\t\t\theight={480}\n\t\t\t\t\tonReady={onReady}\n\t\t\t\t\tonDraw={onDraw}\n\t\t\t\t/>\n\t\t\t</header>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}