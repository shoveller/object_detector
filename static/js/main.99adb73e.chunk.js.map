{"version":3,"sources":["objectDetector.ts","CanvasCamera.tsx","rectDrawer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ml5","require","detect","detector","video","Promise","resolve","reject","err","results","getObjectDetector","onReady","a","objectDetector","get2Dctx","ref","canvas","current","ctx","getContext","flameRate","drawFrame","width","height","modelRunner","onDraw","paused","ended","drawImage","setTimeout","getCameraStream","navigator","mediaDevices","getUserMedia","setup","srcObject","addEventListener","play","CanvasCameraContext","createContext","undefined","setCtx","setVideo","CanvasCameraContextProvider","props","useState","Provider","value","children","CanvasCamera","createRef","document","createElement","useEffect","draw","objects","length","fillStyle","fillRect","i","font","fillText","label","confidence","toFixed","x","y","beginPath","rect","strokeStyle","stroke","closePath","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99adb73e.chunk.js","sourcesContent":["const ml5 = require('ml5')\n\ninterface IObject {\n\tlabel: string\n\tx: number\n\ty: number\n\twidth: number\n\theight: number\n}\n\nexport interface IDetectResult extends IObject {\n\tconfidence: number\n\tnormalized: IObject\n}\n\nexport const detect = (detector: any, video: HTMLVideoElement) => {\n\treturn new Promise<IDetectResult[]>((resolve, reject) => {\n\t\tdetector.detect(video, (err: string, results: IDetectResult[]) => {\n\t\t\tif (err) {\n\t\t\t\treject(err)\n\t\t\t}\n\t\t\tresolve(results)\n\t\t})\n\t})\n}\n\nexport const getObjectDetector = async (onReady?: Function) => await ml5.objectDetector('cocossd', onReady)\n","import React, {\n\tcreateContext,\n\tcreateRef,\n\tDispatch,\n\tReactElement,\n\tRefObject,\n\tSetStateAction,\n\tuseEffect,\n\tuseState,\n} from 'react'\n\ninterface ICanvasCameraProps {\n\twidth: number\n\theight: number\n\tonReady?: () => Promise<any>\n\tonDraw?: (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n\t\tmodelRunner?: any,\n\t) => Promise<any>\n\tchildren?: ReactElement\n}\n\nexport interface ICanvasCameraContext {\n\tctx?: CanvasRenderingContext2D\n\tsetCtx?: Dispatch<SetStateAction<CanvasRenderingContext2D | undefined>>\n\tvideo?: HTMLVideoElement\n\tsetVideo?: Dispatch<SetStateAction<HTMLVideoElement | undefined>>\n}\n\ninterface ICanvasCameraContextProvider {\n\tctx?: CanvasRenderingContext2D\n\tvideo?: HTMLVideoElement\n\tchildren?: ReactElement\n}\n\nconst get2Dctx = (ref: RefObject<HTMLCanvasElement>) => {\n\tconst canvas = ref.current\n\tif (!canvas) {\n\t\treturn\n\t}\n\tconst ctx = canvas.getContext('2d')\n\tif (ctx) {\n\t\treturn ctx\n\t}\n\treturn\n}\n\nconst flameRate = 1000 / 30\n\nconst drawFrame = (\n\tvideo: HTMLVideoElement,\n\tctx: CanvasRenderingContext2D,\n\twidth: number,\n\theight: number,\n  modelRunner?: any,\n  onDraw?: (\n    video: HTMLVideoElement,\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    modelRunner?: any,\n  ) => Promise<any>,\n) => {\n\tif (video.paused) return\n\tif (video.ended) return\n\n\tctx.drawImage(video, 0, 0, width, height)\n\tif (onDraw) {\n\t\tonDraw(video, ctx, width, height, modelRunner)\n\t}\n\tsetTimeout(() => drawFrame(video, ctx, width, height, modelRunner, onDraw), flameRate)\n}\n\nconst createVideo = () => document.createElement('video')\n\nconst getCameraStream = async () =>\n\tawait navigator.mediaDevices.getUserMedia({ video: true })\n\nconst setup = async (\n\tctx: CanvasRenderingContext2D,\n\tvideo: HTMLVideoElement,\n\twidth: number,\n\theight: number,\n\tonReady?: () => Promise<any>,\n\tonDraw?: (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n\t\tmodelRunner?: any,\n\t) => Promise<any>,\n) => {\n  let modelRunner: any\n  if (onReady) {\n    modelRunner = await onReady()\n  }\n\tvideo.srcObject = await getCameraStream()\n\tvideo.addEventListener('loadeddata', function () {\n\t\tvideo.play()\n\t\tsetTimeout(() => drawFrame(video, ctx, width, height, modelRunner, onDraw), flameRate)\n\t})\n}\n\nexport const CanvasCameraContext = createContext<ICanvasCameraContext>({\n\tctx: undefined,\n\tsetCtx: undefined,\n\tvideo: undefined,\n\tsetVideo: undefined,\n})\n\nconst CanvasCameraContextProvider = (props: ICanvasCameraContextProvider) => {\n\tconst [ctx, setCtx] = useState<CanvasRenderingContext2D | undefined>(\n\t\tprops.ctx,\n\t)\n\tconst [video, setVideo] = useState<HTMLVideoElement | undefined>(props.video)\n\n\treturn (\n\t\t<CanvasCameraContext.Provider value={{ ctx, setCtx, video, setVideo }}>\n\t\t\t{props.children}\n\t\t</CanvasCameraContext.Provider>\n\t)\n}\n\nexport const CanvasCamera = (props: ICanvasCameraProps) => {\n\tconst ref = createRef<HTMLCanvasElement>()\n\tconst video = createVideo()\n\tconst { width, height, children, onReady, onDraw } = props\n\tuseEffect(() => {\n\t\tconst ctx = get2Dctx(ref)\n\t\tif (!ctx) {\n\t\t\treturn\n\t\t}\n\n\t\tsetup(ctx, video, width, height, onReady, onDraw)\n\t}, [ref, video, width, height, onDraw, onReady])\n\tconst ctx = get2Dctx(ref)\n\n\treturn (\n\t\t<canvas ref={ref} width={width} height={height}>\n\t\t\t<CanvasCameraContextProvider ctx={ctx} video={video}>\n\t\t\t\t{children}\n\t\t\t</CanvasCameraContextProvider>\n\t\t</canvas>\n\t)\n}\n","import { IDetectResult } from './objectDetector';\n\nexport const draw = (ctx: CanvasRenderingContext2D, video: HTMLVideoElement, objects?: IDetectResult[]) => {\n\tif (!objects?.length) return\n\n\t// Clear part of the canvas\n\tctx.fillStyle = \"#000000\"\n\tctx.fillRect(0,0, 600, 400);\n\n\tctx.drawImage(video, 0, 0, 600, 400);\n\n\tfor (let i = 0; i < objects.length; i += 1) {\n\t\tctx.font = \"16px Arial\";\n\t\tctx.fillStyle = \"green\";\n\t\tctx.fillText(`${objects[i].label} ${(objects[i].confidence * 100).toFixed(0)}%`, objects[i].x + 4, objects[i].y + 16);\n\n\t\tctx.beginPath();\n\t\tctx.rect(objects[i].x, objects[i].y, objects[i].width, objects[i].height);\n\t\tctx.strokeStyle = \"green\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n}\n","import React from 'react'\nimport { getObjectDetector, detect } from './objectDetector'\nimport { CanvasCamera } from './CanvasCamera'\nimport { draw } from './rectDrawer'\n\nfunction App() {\n\tconst onReady = async () => {\n\t\treturn await getObjectDetector()\n\t}\n\n\tconst onDraw = async (\n\t\tvideo: HTMLVideoElement,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number,\n    detector?: any\n\t) => {\n\t\tconst results = await detect(detector, video)\n    draw(ctx, video, results)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<CanvasCamera width={600} height={400} onReady={onReady} onDraw={onDraw} />\n\t\t\t</header>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}